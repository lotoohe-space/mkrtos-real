/**
  @page DualADC_RegulSimu_DMAmode1  Use ADC1 and ADC2 in Dual regular simultaneous mode and DMA mode1

  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    ADC/DualADC_RegulSimu_DMAmode1/readme.txt
  * @author  MCD Application Team
  * @version V1.1.0
  * @date    13-April-2012
  * @brief   Description of the Dual regular simultaneous mode and DMA mode1
  *          Example
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a short description of how to use the ADC peripheral to
convert regular channels simultaneously in dual mode using DMA in mode 1.

Regular simultaneous mode is performed on a regular group of channels. 
In Dual ADC mode, ADC1 data are transferred on the first request, ADC2 data are
transferred on the second request and so on.
On each DMA request (one data item is available), a half-word representing an
ADC-converted data item is transferred.
The conversion is triggered by software.

The ADC1 is configured to convert ADC Channel 10 and 11.
The ADC2 is configured to convert ADC Channel 11 and 12.

Note: the sequence length must be the same for both ADCs

In this example, the system clock is 120MHz, APB2 =60MHz and ADC clock = APB2 /2.
So ADCCLK= 30MHz 

Conversion rate of channel 10 and 12 = 30 cycles => Conversion Time = 30M/30cyc = 1Msps.
Conversion rate of channel 11 = 15 cycles => Conversion Time = 30M/15cyc = 2Msps.

@note Refer to "simulation.xls" file to have the diagram simulation of the example.


@par Directory contents 

  - ADC/DualADC_RegulSimu_DMAmode1/system_stm32f2xx.c   STM32F2xx system clock configuration file
  - ADC/DualADC_RegulSimu_DMAmode1/stm32f2xx_conf.h     Library Configuration file
  - ADC/DualADC_RegulSimu_DMAmode1/stm32f2xx_it.h       Interrupt handlers header file
  - ADC/DualADC_RegulSimu_DMAmode1/stm32f2xx_it.c       Interrupt handlers
  - ADC/DualADC_RegulSimu_DMAmode1/main.c               Main program


@note The "system_stm32f2xx.c" is generated by an automatic clock configuration 
      tool and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F2xx_Clock_Configuration_V1.0.0.xls" 
      provided with the AN3362 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>  


@par Hardware and Software environment 

  - This example runs on STM32F2xx Devices.

  - This example has been tested with STM322xG-EVAL RevB and can be easily tailored
    to any other development board.

  - STM322xG-EVAL Set-up 
    - Connect PC.0, PC.1 and PC.2 to a power supply (do not forget to connect the
      power supply GND to the EVAL board GND)


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32F2xx_StdPeriph_Template
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example
  
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */


